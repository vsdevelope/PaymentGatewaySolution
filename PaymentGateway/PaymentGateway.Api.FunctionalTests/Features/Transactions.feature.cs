// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PaymentGateway.Api.FunctionalTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Transactions")]
    public partial class TransactionsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Transactions.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Transactions", "\tAs a Merchant\r\n\tI want to Post and Get transactions\r\n\tSo that I can accept payme" +
                    "nts from my Ecommerce customers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trying to post a transaction without valid MerchantKey")]
        public virtual void TryingToPostATransactionWithoutValidMerchantKey()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trying to post a transaction without valid MerchantKey", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("I am not authenticated merchant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "TerminalId",
                            "Amount",
                            "Currency",
                            "CardNumber",
                            "CVV",
                            "ExpiryDate",
                            "CustomerName",
                            "CustomerAddressLine1",
                            "Postcode",
                            "TransactionTypeId",
                            "TransactionDate"});
                table1.AddRow(new string[] {
                            "M0003",
                            "TMX001",
                            "9999.99",
                            "GBP",
                            "4444123433331111",
                            "123",
                            "<<futuredate>>",
                            "BDD Customer 1",
                            "BDD AL1",
                            "BD1 GH2",
                            "3",
                            "<<pastdate>>"});
#line 9
 testRunner.When("I post a transaction", ((string)(null)), table1, "When ");
#line hidden
#line 12
 testRunner.Then("the response has an HTTP status code of Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trying to post a transaction for non registered terminal")]
        public virtual void TryingToPostATransactionForNonRegisteredTerminal()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trying to post a transaction for non registered terminal", null, tagsOfScenario, argumentsOfScenario);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
 testRunner.Given("I am authenticated as \'Merchant1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "TerminalId",
                            "Amount",
                            "Currency",
                            "CardNumber",
                            "CVV",
                            "ExpiryDate",
                            "CustomerName",
                            "CustomerAddressLine1",
                            "Postcode",
                            "TransactionTypeId",
                            "TransactionDate"});
                table2.AddRow(new string[] {
                            "M0001",
                            "TMX001",
                            "9999.99",
                            "GBP",
                            "4444123433331111",
                            "123",
                            "<<futuredate>>",
                            "BDD Customer 1",
                            "BDD AL1",
                            "BD1 GH2",
                            "3",
                            "<<pastdate>>"});
#line 16
 testRunner.When("I post a transaction", ((string)(null)), table2, "When ");
#line hidden
#line 19
 testRunner.Then("the response has an HTTP status code of Forbidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trying to post a transaction with invalid input")]
        public virtual void TryingToPostATransactionWithInvalidInput()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trying to post a transaction with invalid input", null, tagsOfScenario, argumentsOfScenario);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given("I am authenticated as \'Merchant1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "TerminalId",
                            "Amount",
                            "Currency",
                            "CardNumber",
                            "CVV",
                            "ExpiryDate",
                            "CustomerName",
                            "CustomerAddressLine1",
                            "Postcode",
                            "TransactionTypeId",
                            "TransactionDate"});
                table3.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "444412343d331111",
                            "ddd",
                            "44/44",
                            "",
                            "",
                            "",
                            "",
                            ""});
#line 23
 testRunner.When("I post a transaction", ((string)(null)), table3, "When ");
#line hidden
#line 26
 testRunner.Then("the response has an HTTP status code of BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Error"});
                table4.AddRow(new string[] {
                            "Merchant Id is required."});
                table4.AddRow(new string[] {
                            "Terminal Id is required."});
                table4.AddRow(new string[] {
                            "Amount is required."});
                table4.AddRow(new string[] {
                            "Amount should be greater than 0"});
                table4.AddRow(new string[] {
                            "Currency is required."});
                table4.AddRow(new string[] {
                            "only GBP currency is supported."});
                table4.AddRow(new string[] {
                            "Card Number should contain only 16 digts"});
                table4.AddRow(new string[] {
                            "CVV length should contain only 3 or 4 digits"});
                table4.AddRow(new string[] {
                            "Card already expired or invalid expiry date. Expiry date should be mm/yy format"});
                table4.AddRow(new string[] {
                            "Transaction Type Id is required."});
                table4.AddRow(new string[] {
                            "Transaction Type Id should be greater than or equal to 1"});
                table4.AddRow(new string[] {
                            "\'0\' not supported for Transaction Type Id"});
                table4.AddRow(new string[] {
                            "Transaction Date is required."});
                table4.AddRow(new string[] {
                            "Customer Name is required."});
                table4.AddRow(new string[] {
                            "Customer Address Line1 is required."});
                table4.AddRow(new string[] {
                            "Post Code is required."});
#line 27
 testRunner.And("I should see the following validation errors", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trying to post a transaction for a registered terminal with valid request")]
        public virtual void TryingToPostATransactionForARegisteredTerminalWithValidRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trying to post a transaction for a registered terminal with valid request", null, tagsOfScenario, argumentsOfScenario);
#line 46
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
 testRunner.Given("I am authenticated as \'Merchant1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "MerchantId",
                            "TerminalId",
                            "Amount",
                            "Currency",
                            "CardNumber",
                            "CVV",
                            "ExpiryDate",
                            "CustomerName",
                            "CustomerAddressLine1",
                            "Postcode",
                            "TransactionTypeId",
                            "TransactionDate"});
                table5.AddRow(new string[] {
                            "M0001",
                            "T0002",
                            "9999.99",
                            "GBP",
                            "4444123433331111",
                            "123",
                            "<<futuredate>>",
                            "BDD Customer 1",
                            "BDD AL1",
                            "BD1 GH2",
                            "3",
                            "<<pastdate>>"});
#line 48
 testRunner.When("I post a transaction", ((string)(null)), table5, "When ");
#line hidden
#line 51
 testRunner.Then("the response has an HTTP status code of Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.When("I try to get details of previous transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Then("the response has an HTTP status code of Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "TerminalId",
                            "TransactionId",
                            "Amount",
                            "Currency",
                            "CardNumber",
                            "CVV",
                            "ExpiryDate",
                            "CustomerName",
                            "CustomerAddressLine1",
                            "PostCode",
                            "TransactionType",
                            "DateTransactionCreated",
                            "dateTransactionUpdated",
                            "transactionStatus",
                            "bankReference",
                            "statusReason"});
                table6.AddRow(new string[] {
                            "T0002",
                            "<<transactionId>>",
                            "9999.99",
                            "GBP",
                            "****-****-****-1111",
                            "***",
                            "<<expiryDate>>",
                            "BDD Customer 1",
                            "BDD AL1",
                            "BD1 GH2",
                            "3",
                            "<<transactionDate>>",
                            "<<transactionUpdatedDate>>",
                            "1",
                            "1111",
                            "Succeeded"});
#line 54
 testRunner.And("I should see transaction detail", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
