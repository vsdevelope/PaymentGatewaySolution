// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentGateway.Persistence;

namespace PaymentGateway.Persistence.Migrations
{
    [DbContext(typeof(PaymentGatewayDbContext))]
    [Migration("20210405210839_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PaymentGateway.Domain.Entities.MerchantKeyMapping", b =>
                {
                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MerchantKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("MerchantId")
                        .HasName("PK_MerchantKeyMapping_MerchantId");

                    b.HasAlternateKey("MerchantKey")
                        .HasName("PK_MerchantKeyMapping_Key");

                    b.ToTable("MerchantKeyMappings");

                    b.HasData(
                        new
                        {
                            MerchantId = "M0001",
                            Id = 1,
                            MerchantKey = "hCQcGPPOf0DKCLSTWDlveQ=="
                        },
                        new
                        {
                            MerchantId = "M0002",
                            Id = 2,
                            MerchantKey = "7UWuP2WPizfr4O7GmepI3A=="
                        },
                        new
                        {
                            MerchantId = "M0003",
                            Id = 3,
                            MerchantKey = "eDhl3PO6DZ/lX1Ype9tbFQ=="
                        });
                });

            modelBuilder.Entity("PaymentGateway.Domain.Entities.PaymentTransactionStatus", b =>
                {
                    b.Property<int>("PaymentTransactionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("PaymentTransactionStatusId")
                        .HasName("PK_Payment_Transaction_Status");

                    b.ToTable("TransactionStatuses");

                    b.HasData(
                        new
                        {
                            PaymentTransactionStatusId = 1,
                            Description = "Succeeded"
                        },
                        new
                        {
                            PaymentTransactionStatusId = 2,
                            Description = "Failed"
                        },
                        new
                        {
                            PaymentTransactionStatusId = 3,
                            Description = "InProgress"
                        },
                        new
                        {
                            PaymentTransactionStatusId = 4,
                            Description = "Exception"
                        },
                        new
                        {
                            PaymentTransactionStatusId = 5,
                            Description = "Cancelled"
                        },
                        new
                        {
                            PaymentTransactionStatusId = 6,
                            Description = "Error From Acquirer"
                        });
                });

            modelBuilder.Entity("PaymentGateway.Domain.Entities.PaymentTransactionType", b =>
                {
                    b.Property<int>("PaymentTransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("PaymentTransactionTypeId")
                        .HasName("PK_Payment_Transaction_Type");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            PaymentTransactionTypeId = 1,
                            Description = "CreditCardPayment"
                        },
                        new
                        {
                            PaymentTransactionTypeId = 2,
                            Description = "DebitCardPayment"
                        },
                        new
                        {
                            PaymentTransactionTypeId = 3,
                            Description = "PreAuth"
                        },
                        new
                        {
                            PaymentTransactionTypeId = 4,
                            Description = "Auth"
                        },
                        new
                        {
                            PaymentTransactionTypeId = 5,
                            Description = "Refund"
                        },
                        new
                        {
                            PaymentTransactionTypeId = 6,
                            Description = "Cancel"
                        });
                });

            modelBuilder.Entity("PaymentGateway.Domain.Entities.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 10000)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerAddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateTransactionCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateTransactionUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionId = 10000L,
                            Amount = 120.18m,
                            BankReference = "HSBC0001",
                            CVV = "svkLRj9nYEgZo7gWDJD5IQ==",
                            CardNumber = "n7Na77vcGsJiVmOYhxSHFeNia8tb2y8trC42595bSBZBgrziJqf0ZLYkIiKXmLYb",
                            Currency = "GBP",
                            CustomerAddressLine1 = "Customer 1 AL1",
                            CustomerName = "Mr Customer1",
                            DateTransactionCreated = new DateTimeOffset(new DateTime(2021, 4, 5, 22, 8, 38, 869, DateTimeKind.Unspecified).AddTicks(8775), new TimeSpan(0, 1, 0, 0, 0)),
                            DateTransactionUpdated = new DateTimeOffset(new DateTime(2021, 4, 5, 22, 10, 38, 872, DateTimeKind.Unspecified).AddTicks(8034), new TimeSpan(0, 1, 0, 0, 0)),
                            ExpiryDate = "12/21",
                            MerchantId = "M0001",
                            PostCode = "AB1 2CD",
                            StatusReason = "Succeeded",
                            TerminalId = "T0001",
                            TransactionStatusId = 1,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            TransactionId = 10001L,
                            Amount = 99.99m,
                            BankReference = "HSBC0002",
                            CVV = "uBeKFM03ScPlfo3f/iEcUA==",
                            CardNumber = "QLKHKBxBaca4O9Aac0FO3wZ4SgmkmvyWo0AUN7rqM3d2RGQPqOyjAOt4g1G8eY2x",
                            Currency = "GBP",
                            CustomerAddressLine1 = "Customer 2 AL1",
                            CustomerName = "Mr Customer2",
                            DateTransactionCreated = new DateTimeOffset(new DateTime(2021, 4, 5, 22, 8, 38, 875, DateTimeKind.Unspecified).AddTicks(1368), new TimeSpan(0, 1, 0, 0, 0)),
                            DateTransactionUpdated = new DateTimeOffset(new DateTime(2021, 4, 5, 22, 10, 8, 875, DateTimeKind.Unspecified).AddTicks(1403), new TimeSpan(0, 1, 0, 0, 0)),
                            ExpiryDate = "12/22",
                            MerchantId = "M0001",
                            PostCode = "AB2 1CD",
                            StatusReason = "InvalidCardDetails",
                            TerminalId = "T0001",
                            TransactionStatusId = 2,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            TransactionId = 10002L,
                            Amount = 99.99m,
                            BankReference = "BLAC0001",
                            CVV = "uBeKFM03ScPlfo3f/iEcUA==",
                            CardNumber = "QLKHKBxBaca4O9Aac0FO3wZ4SgmkmvyWo0AUN7rqM3d2RGQPqOyjAOt4g1G8eY2x",
                            Currency = "GBP",
                            CustomerAddressLine1 = "Customer 3 AL1",
                            CustomerName = "Mr Customer3",
                            DateTransactionCreated = new DateTimeOffset(new DateTime(2021, 4, 5, 22, 8, 38, 877, DateTimeKind.Unspecified).AddTicks(2513), new TimeSpan(0, 1, 0, 0, 0)),
                            DateTransactionUpdated = new DateTimeOffset(new DateTime(2021, 4, 5, 22, 9, 46, 877, DateTimeKind.Unspecified).AddTicks(2538), new TimeSpan(0, 1, 0, 0, 0)),
                            ExpiryDate = "12/22",
                            MerchantId = "M0001",
                            PostCode = "AB3 2CD",
                            StatusReason = "LinkFailure",
                            TerminalId = "T0002",
                            TransactionStatusId = 3,
                            TransactionTypeId = 3
                        },
                        new
                        {
                            TransactionId = 10003L,
                            Amount = 99.99m,
                            BankReference = "LLy0001",
                            CVV = "uBeKFM03ScPlfo3f/iEcUA==",
                            CardNumber = "AXqFl9U3iEHMjBq6KjWs08YU0rQE+/N4oaZf0Kg6gvo=",
                            Currency = "GBP",
                            CustomerAddressLine1 = "Customer 4 AL1",
                            CustomerName = "Mr Customer4",
                            DateTransactionCreated = new DateTimeOffset(new DateTime(2021, 4, 5, 22, 8, 38, 880, DateTimeKind.Unspecified).AddTicks(3586), new TimeSpan(0, 1, 0, 0, 0)),
                            DateTransactionUpdated = new DateTimeOffset(new DateTime(2021, 4, 5, 22, 9, 56, 880, DateTimeKind.Unspecified).AddTicks(3604), new TimeSpan(0, 1, 0, 0, 0)),
                            ExpiryDate = "10/22",
                            MerchantId = "M0002",
                            PostCode = "AB4 5CD",
                            StatusReason = "Succeeded",
                            TerminalId = "TM0001",
                            TransactionStatusId = 1,
                            TransactionTypeId = 6
                        },
                        new
                        {
                            TransactionId = 10004L,
                            Amount = 99.99m,
                            BankReference = "LLy0001",
                            CVV = "V0P1bOxKJEudFjsUjN35Cw==",
                            CardNumber = "bI+sGVxXLxwKwcMbuFLIpwDp44IS/ISKgxU2aZ/6gRMkuccVG2/W7ZbgqcHkCDaS",
                            Currency = "GBP",
                            CustomerAddressLine1 = "Customer 5 AL1",
                            CustomerName = "Mr Customer5",
                            DateTransactionCreated = new DateTimeOffset(new DateTime(2021, 4, 5, 22, 8, 38, 883, DateTimeKind.Unspecified).AddTicks(6522), new TimeSpan(0, 1, 0, 0, 0)),
                            DateTransactionUpdated = new DateTimeOffset(new DateTime(2021, 4, 5, 22, 10, 27, 883, DateTimeKind.Unspecified).AddTicks(6543), new TimeSpan(0, 1, 0, 0, 0)),
                            ExpiryDate = "12/22",
                            MerchantId = "M0003",
                            PostCode = "AB4 5CD",
                            StatusReason = "Succeeded",
                            TerminalId = "TMX001",
                            TransactionStatusId = 1,
                            TransactionTypeId = 6
                        });
                });

            modelBuilder.Entity("PaymentGateway.Domain.Merchant", b =>
                {
                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("MerchantKeyMappingId")
                        .HasColumnType("int");

                    b.HasKey("TerminalId")
                        .HasName("PK_Merchant_Terminal");

                    b.ToTable("Merchants");

                    b.HasData(
                        new
                        {
                            TerminalId = "T0001",
                            MerchantKeyMappingId = 1
                        },
                        new
                        {
                            TerminalId = "T0002",
                            MerchantKeyMappingId = 1
                        },
                        new
                        {
                            TerminalId = "TM0001",
                            MerchantKeyMappingId = 2
                        },
                        new
                        {
                            TerminalId = "TMX001",
                            MerchantKeyMappingId = 3
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
